# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpectralToolsDialog
                                 A QGIS plugin
 Tools for spectral
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-10-16
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Lennert Antson
        email                : antsonlennert@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import numpy as np

from qgis.gui import *
from qgis.PyQt import uic, QtWidgets

from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QMainWindow, QVBoxLayout, QWidget, QAction
from qgis.core import QgsRasterLayer, QgsMessageLog, QgsProject, QgsPointXY, QgsRaster, QgsPoint

from PyQt5.QtWidgets import QGraphicsScene
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'spectral_tools_main.ui'))


def print(msg: str):
    QgsMessageLog.logMessage(msg, 'SpectralTools')


class SpectralToolsWindow(QMainWindow, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SpectralToolsWindow, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.setWindowTitle("Spectral Tools")

       
        # Initialize the map canvas
        self.canvas.setCanvasColor(Qt.white)
        self.canvas.enableAntiAliasing(True)
        
        # Load a raster layer (replace 'your_raster_file_path' with the path to your raster file)
        self.loadRasterLayer('/home/lantson/.local/share/QGIS/QGIS3/profiles/default/python/spectral_tools/output_rgb.tiff')

        
        self.actionZoomIn = QAction("Zoom in", self)
        self.actionZoomOut = QAction("Zoom out", self)
        self.actionPan = QAction("Pan", self)
        self.actionInspectPixel = QAction("Inspect Pixel", self)

        self.actionZoomIn.setCheckable(True)
        self.actionZoomOut.setCheckable(True)
        self.actionPan.setCheckable(True)
        self.actionInspectPixel.setCheckable(True)

        self.actionZoomIn.triggered.connect(self.zoomIn)
        self.actionZoomOut.triggered.connect(self.zoomOut)
        self.actionPan.triggered.connect(self.pan)
        self.actionInspectPixel.triggered.connect(self.inspectPixel)

        self.toolbar = self.addToolBar("Canvas actions")
        self.toolbar.addAction(self.actionZoomIn)
        self.toolbar.addAction(self.actionZoomOut)
        self.toolbar.addAction(self.actionPan)
        self.toolbar.addAction(self.actionInspectPixel)

        # create the map tools
        self.toolPan = QgsMapToolPan(self.canvas)
        self.toolPan.setAction(self.actionPan)
        self.toolZoomIn = QgsMapToolZoom(self.canvas, False) # false = in
        self.toolZoomIn.setAction(self.actionZoomIn)
        self.toolZoomOut = QgsMapToolZoom(self.canvas, True) # true = out
        self.toolZoomOut.setAction(self.actionZoomOut)
        self.toolIdentifyFeature = QgsMapToolIdentify(self.canvas)
        self.toolIdentifyFeature.setAction(self.actionInspectPixel)

        #self.canvas.clicked.connect(self.getPixelValue)
        #self.canvas.xyCoordinates.connect(self.showCoordinates)

        self.toolIdentifyFeature.canvasReleaseEvent = lambda event: self.extractPixelValue(event)


        self.pan()
        self.canvas.show()
    
    def extractPixelValue(self, event):
        
        # Extract the number of bands of this layer
        n_bands = self.canvas.layers()[0].bandCount()

        # Each pixel has n bands. This array will store the value at each band.
        pixel_band_values = np.empty((n_bands), dtype=np.float32)

        
        for band_id in range(n_bands):
            point = QgsPointXY(event.mapPoint().x(), event.mapPoint().y())

            # First band starts at 1 :'(
            result, _ = self.canvas.layers()[0].dataProvider().sample(point, band_id+1)

            pixel_band_values[band_id] = result

        # [] --> use all the active layers
        #result = self.toolIdentifyFeature.identify(QgsPoint(event.x(), event.y()), [], QgsRaster.IdentifyFormatValue)
        # result = self.toolIdentifyFeature.identify(event.x(), event.y(), [],)

        
        # Create a Matplotlib figure
        figure = Figure()

        # Create a subplot on the figure
        ax = figure.add_subplot(111)
        ax.plot(pixel_band_values, label="Spectrum")
        
        self.scene = QGraphicsScene(self) 
        figure_canvas = FigureCanvas(figure)
        self.scene.addWidget(figure_canvas)
        self.graphics_view.setScene(self.scene)
        
        #if result:
            #m_value = result[0].geometry().constGet().mAt(0) # only for LineString as explained above
            #print(m_value)

    def zoomIn(self):
        self.canvas.setMapTool(self.toolZoomIn)

    def zoomOut(self):
        self.canvas.setMapTool(self.toolZoomOut)

    def pan(self):
        self.canvas.setMapTool(self.toolPan)
    
    def inspectPixel(self):
        self.canvas.setMapTool(self.toolIdentifyFeature)

    
    
    def loadRasterLayer(self, raster_file):
        # Create a raster layer
        layer = QgsRasterLayer(raster_file, "Raster Layer")
        
        # Check if the layer loaded successfully
        if not layer.isValid():
            print(f"error summary: {layer.error().summary()}")
        else:
            # If you would like to use the opened layers for rendering, do not forget to add them to map layer registry. 
            QgsProject.instance().addMapLayer(layer)

            # Add the raster layer to the map canvas
            self.canvas.setExtent(layer.extent())
            self.canvas.setLayers([layer])
            #print("layer count:")
            #print(f"{self.canvas.layerCount()}")
